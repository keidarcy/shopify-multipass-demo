{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["ACTION_TYPES","initialState","domain","key","redirect","data","JSON","stringify","email","tag_string","first_name","last_name","addresses","address1","city","country","phone","province","zip","province_code","country_code","default","undefined","url","reducer","state","action","type","CHANGE","payload","field","value","SUBMIT","Multipass","withCustomerData","parse","withDomain","withRedirect","alert","t","secret","customer","button","doc","App","useReducer","dispatch","useState","URLSearchParams","window","location","search","get","isJa","setIsJa","className","role","aria-label","onClick","htmlFor","onChange","e","target","id","href","rel","rows","preventDefault","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e31bc038.chunk.js","sourcesContent":["import React, { useReducer, useState } from 'react';\nimport { Multipass } from 'multipass-js';\nimport './App.css';\n\nenum ACTION_TYPES {\n  CHANGE = 'CHANGE',\n  SUBMIT = 'SUBMIT',\n  TOGGLE_LOADING = 'TOGGLE_LOADING'\n}\n\nconst initialState = {\n  domain: 'xxx.myshopify.com',\n  key: '',\n  redirect: '/',\n  data: JSON.stringify(\n    {\n      email: 'aaa@aaa.com',\n      tag_string: 'multipass',\n      first_name: 'TEST',\n      last_name: 'TEST',\n      addresses: [\n        {\n          address1: '123 Oak St',\n          city: 'Ottawa',\n          country: 'Canada',\n          first_name: 'TEST',\n          last_name: 'TEST',\n          phone: '555-1212',\n          province: 'Ontario',\n          zip: '123 ABC',\n          province_code: 'ON',\n          country_code: 'CA',\n          default: true\n        }\n      ]\n    },\n    undefined,\n    2\n  ),\n  url: ''\n};\n\ntype State = typeof initialState;\n\ntype Action =\n  | { type: ACTION_TYPES.CHANGE; payload: { field: string; value: string } }\n  | { type: ACTION_TYPES.SUBMIT };\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case ACTION_TYPES.CHANGE:\n      return { ...state, [action.payload.field]: action.payload.value };\n    case ACTION_TYPES.SUBMIT: {\n      if (!state.domain || !state.data || !state.key) {\n        alert('全項目は必須です。All fields are required.');\n        return state;\n      } else {\n        let url;\n        if (state.redirect) {\n          url = new Multipass(state.key)\n            .withCustomerData(JSON.parse(state.data))\n            .withDomain(state.domain)\n            .withRedirect(state.redirect)\n            .url();\n        } else {\n          url = new Multipass(state.key)\n            .withCustomerData(JSON.parse(state.data))\n            .withDomain(state.domain)\n            .withRedirect(state.redirect)\n            .url();\n        }\n        return { ...state, url };\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nconst t = {\n  en: {\n    domain: 'Shopify Store Domain',\n    redirect: 'redirect',\n    secret: 'Multipass Secret',\n    customer: 'Customer Data',\n    alert: 'Invalid Input Content',\n    email: 'email is required.',\n    button: 'Generate Mutipass URL',\n    doc: 'Shopify multipass documentation'\n  },\n  ja: {\n    domain: 'Shopify ドメイン',\n    redirect: 'リダイレクト',\n    secret: 'マルチパス シークレット',\n    customer: '顧客データ',\n    alert: '入力項目チェックしてください。',\n    email: 'emailは必須。',\n    button: 'マルチパス用のURL生成',\n    doc: 'Shopify マルチパスドキュメント'\n  }\n};\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [isJa, setIsJa] = useState(\n    !new URLSearchParams(window.location.search).get('lang')\n  );\n  return (\n    <>\n      <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n        <button\n          type=\"button\"\n          onClick={() => setIsJa(true)}\n          className={`btn ${isJa ? 'btn-primary' : 'btn-outline-primary'}`}\n        >\n          日本語\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => setIsJa(false)}\n          className={`btn ${isJa ? 'btn-outline-warning' : 'btn-warning'}`}\n        >\n          English\n        </button>\n      </div>\n      <div className=\"container my-5\">\n        <form>\n          <div className=\"form-group\">\n            <label htmlFor=\"domain\">{isJa ? t.ja.domain : t.en.domain}</label>\n            <input\n              type=\"input\"\n              className=\"form-control\"\n              onChange={(e) =>\n                dispatch({\n                  type: ACTION_TYPES.CHANGE,\n                  payload: { field: e.target.id, value: e.target.value }\n                })\n              }\n              value={state.domain}\n              id=\"domain\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"redirect\">{isJa ? t.ja.redirect : t.en.redirect}</label>\n            <input\n              type=\"input\"\n              className=\"form-control\"\n              onChange={(e) =>\n                dispatch({\n                  type: ACTION_TYPES.CHANGE,\n                  payload: { field: e.target.id, value: e.target.value }\n                })\n              }\n              value={state.redirect}\n              id=\"redirect\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"secret\">{isJa ? t.ja.secret : t.en.secret}</label>\n            <input\n              type=\"input\"\n              value={state.key}\n              className=\"form-control\"\n              onChange={(e) =>\n                dispatch({\n                  type: ACTION_TYPES.CHANGE,\n                  payload: { field: e.target.id, value: e.target.value }\n                })\n              }\n              id=\"key\"\n            />\n            <a\n              href=\"https://shopify.dev/docs/admin-api/rest/reference/plus/multipass\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {isJa ? t.ja.doc : t.en.doc}\n            </a>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"customer\">{isJa ? t.ja.customer : t.en.customer}</label>\n            <textarea\n              className=\"form-control\"\n              onChange={(e) =>\n                dispatch({\n                  type: ACTION_TYPES.CHANGE,\n                  payload: { field: e.target.id, value: e.target.value }\n                })\n              }\n              id=\"data\"\n              rows={6}\n              value={state.data}\n            ></textarea>\n            <small id=\"emailHelp\" className=\"form-text text-muted\">\n              {isJa ? t.ja.email : t.en.email}\n            </small>\n          </div>\n          <button\n            type=\"submit\"\n            onClick={(e) => {\n              e.preventDefault();\n              dispatch({ type: ACTION_TYPES.SUBMIT });\n            }}\n            className=\"btn btn-primary\"\n          >\n            {isJa ? t.ja.button : t.en.button}\n          </button>\n        </form>\n      </div>\n      <div className=\"container\">\n        <p>Multipass URL:</p>\n        <a href={state.url} target=\"_blank\" rel=\"noopener noreferrer\">\n          {state.url}\n        </a>\n      </div>\n      <footer className=\"pass-footer\">\n        <button className=\"tesla\">\n          Viewing existing code on{' '}\n          <a href=\"https://github.com/keidarcy/shopify-multipass-demo/\">GitHub</a>\n        </button>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}